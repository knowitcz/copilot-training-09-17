#!/usr/bin/env python3
"""
Dynamic API Endpoint Server - Provides a dynamic list of REST endpoints from FastAPI code and allows calling any endpoint.
Version: 1.0
Generated by MCP Server Creator on 2025-09-18
"""

from fastmcp import FastMCP, Context
import asyncio
import os
import re
import requests

# Initialize the MCP server
mcp = FastMCP(
    "Dynamic API Endpoint Server",
    instructions="""Provides a dynamic list of REST endpoints from FastAPI code and allows calling any endpoint."""
)

@mcp.tool()
def call_endpoint(method: str, path: str, payload: dict = {}):
    """Calls any REST endpoint found in the FastAPI code by specifying method, path, and optional payload."""
    base_url = 'http://localhost:8000'  # Adjust if needed
    url = f'{base_url}{path}'
    method = method.lower()
    if method == 'get':
        response = requests.get(url, params=payload)
    elif method == 'post':
        response = requests.post(url, json=payload)
    elif method == 'put':
        response = requests.put(url, json=payload)
    elif method == 'delete':
        response = requests.delete(url, json=payload)
    elif method == 'patch':
        response = requests.patch(url, json=payload)
    else:
        return {'error': 'Unsupported method'}
    return {'status_code': response.status_code, 'body': response.json() if response.content else None}

@mcp.resource("endpoints://list")
def get_endpoints_list():
    """Returns a dynamic list of REST endpoints found in the FastAPI code under /app/api."""
    api_dir = os.path.join(os.path.dirname(__file__), '../app/api')
    endpoints = []
    route_pattern = re.compile(r'@router\.(get|post|put|delete|patch)\(["\"][^"\"]+["\"]')
    for filename in os.listdir(api_dir):
        if filename.endswith('_routes.py'):
            with open(os.path.join(api_dir, filename)) as f:
                for line in f:
                    match = route_pattern.search(line)
                    if match:
                        method = match.group(1).upper()
                        path = re.search(r'\(["\"]([^"\"]+)["\"]', line).group(2)
                        endpoints.append({'file': filename, 'method': method, 'path': path})
    return endpoints

if __name__ == "__main__":
    mcp.run()
